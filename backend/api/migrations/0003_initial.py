# Generated by Django 4.2 on 2025-10-16 08:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0002_delete_note'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ESSAY', 'Essay Prompt'), ('PITCH', 'Pitch Competition')], max_length=10)),
                ('category', models.CharField(help_text='e.g., Artificial Intelligence, BioTech', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional: Provide a brief description or prompt details.')),
                ('deadline', models.DateTimeField()),
                ('status', models.CharField(choices=[('UPCOMING', 'Upcoming'), ('OPEN', 'Open'), ('CLOSED', 'Closed')], default='UPCOMING', max_length=10)),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide from the frontend without deleting.')),
            ],
            options={
                'ordering': ['deadline'],
            },
        ),
        migrations.CreateModel(
            name='ResearchOpportunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('field', models.CharField(help_text='e.g., CleanTech, AI', max_length=100)),
                ('professor', models.CharField(max_length=100)),
                ('spots_available', models.PositiveIntegerField(default=1)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Research Opportunities',
                'ordering': ['field', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SessionRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('speaker', models.CharField(max_length=100)),
                ('recording_date', models.DateField()),
                ('duration_minutes', models.IntegerField(help_text='Duration in whole minutes.')),
                ('video_url', models.URLField(help_text='Link to the video (e.g., YouTube, Vimeo).')),
            ],
            options={
                'ordering': ['-recording_date'],
            },
        ),
        migrations.CreateModel(
            name='TimelineEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('event_date', models.DateTimeField()),
                ('type', models.CharField(choices=[('VIRTUAL', 'Virtual'), ('IN_PERSON', 'In-Person')], max_length=10)),
            ],
            options={
                'ordering': ['event_date'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_file', models.FileField(help_text="The user's submitted file (e.g., PDF, DOCX, PPTX).", upload_to='submissions/%Y/%m/%d/')),
                ('submission_text', models.TextField(blank=True, help_text='Optional notes or text-based submission.')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.competition')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('competition', 'user')},
            },
        ),
    ]
